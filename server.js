/* eslint-disable no-console */
/* eslint-disable global-require */
require('dotenv').config();
const fs = require('fs');
const path = require('path');
const LRU = require('lru-cache');
const express = require('express');
const cookieParser = require('cookie-parser');
const favicon = require('serve-favicon');
const compression = require('compression');
const axios = require('axios');
const http = require('http');
const https = require('https');
const sitemap = require('./src/sitemap');

const resolve = file => path.resolve(__dirname, file);
const { createBundleRenderer } = require('vue-server-renderer');

const isProd = process.env.NODE_ENV === 'production';
const useMicroCache = process.env.MICRO_CACHE !== 'false';
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`;

const app = express();

const template = fs.readFileSync(resolve('./src/index.template.html'), 'utf-8');

function createRenderer(bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    template,
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15,
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false,
  }));
}

let renderer;
let readyPromise;
if (isProd) {
  // In production: create server renderer using built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundle = require('./dist/vue-ssr-server-bundle.json');
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json');
  renderer = createRenderer(bundle, {
    clientManifest,
  });
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(app, (bundle, options) => {
    renderer = createRenderer(bundle, options);
  });
}

const serve = (filepath, cache) => express.static(resolve(filepath), {
  maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0,
});

app.use(compression({ threshold: 0 }));
const faviconPath = path.join(__dirname, 'public', 'logo-48.png');
app.use(favicon(faviconPath));
app.use('/dist', serve('./dist', true));
app.use('/public', serve('./public', true));
app.use('/manifest.json', serve('./manifest.json', true));
app.use('/service-worker.js', serve('./dist/service-worker.js'));

// 30-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
const microCache = LRU({
  max: 100,
  maxAge: 30000,
});

// since this app has no user-specific content, every page is micro-cacheable.
const isCacheable = req => useMicroCache;

let previewQuery = false;

axios.interceptors.request.use((config) => {
  if (previewQuery) config.params.p = previewQuery;
  return config;
});

function renderMaintenance(req, res) {
  res.sendFile(resolve('./src/index.maintenance.html'));
}

function renderDefault(req, res) {
  const s = !isProd ? Date.now() : false;
  // Set the preview query for the axios interceptor
  previewQuery = req.query.p ? req.query.p : false;

  res.setHeader('Content-Type', 'text/html');
  res.setHeader('Server', serverInfo);

  const handleError = (err) => {
    if (err.url) {
      res.redirect(err.url);
    } else if (err.status === 404) {
      res.status(404).end('404 | Page Not Found');
    } else {
      // Render Error Page or Redirect
      res.status(500).end('500 | Internal Server Error');
      console.error(`error during render : ${req.url}`);
      console.error(err);
    }
  };

  const cacheable = isCacheable(req);
  if (cacheable) {
    const hit = microCache.get(req.url);
    if (hit) {
      if (!isProd) {
        console.log('cache hit!');
      }
      return res.end(hit);
    }
  }

  const context = {
    title: 'M+ Stories', // default title
    description: 'M+ Stories Website', // default description
    verification: process.env.SITE_VERIFICATION,
    url: req.url,
  };

  return renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err);
    }

    if (context.state.route.name === 'not-found' && context.state.site.initialized) {
      res.status(404);
      return res.end(html);
    }

    res.end(html);
    if (cacheable) microCache.set(req.url, html);
    if (!isProd) console.log(`whole request: ${Date.now() - s}ms`);
    return true;
  });
}

const render = process.env.MODE === 'MAINTENANCE'
  ? renderMaintenance
  : renderDefault;

// SSL
if (process.env.USEHTTPS) {
  console.log('Using HTTPS redirects');
  // redirect http to https
  app.enable('trust proxy');
  app.use(require('./middleware/http-to-https.js'));

  if (process.env.SSLKEY && process.env.SSLCERT) {
    console.log('Using SSL credentials');
    const credentials = {
      key: fs.readFileSync(process.env.SSLKEY),
      cert: fs.readFileSync(process.env.SSLCERT),
    };
    if (process.env.SSLPASSPHRASE) credentials.passphrase = process.env.SSLPASSPHRASE;
    const securePort = process.env.SECUREPORT || 8443;
    https.createServer(credentials, app).listen(securePort, () => {
      console.log(`HTTPS server started at localhost:${securePort}`);
    });
  }
}

const port = process.env.PORT || 8080;
http.createServer(app).listen(port, () => {
  console.log(`HTTP server started at localhost:${port}`);
});

// Basic Authentication
if (process.env.AUTH) {
  console.log('Using basic authentication');
  app.use(require('./middleware/basic-auth.js'));
}

// Status check for load balancer
app.get('/status', (req, res) => {
  res.json({ status: 'running' });
});

// Sitemap
const sitemapRoute = sitemap(app, serverInfo);
const sitemapEndpoint = `${process.env.API_URL}/data/sitemap/`;
const sitemapEndpoints = {
  en: `${sitemapEndpoint}?lang=en`,
  tc: `${sitemapEndpoint}?lang=tc`,
};
app.get(sitemapEndpoint, (req, res) => res.redirect(sitemapEndpoints.en));
sitemapRoute('/en/sitemap.xml', sitemapEndpoints.en);
sitemapRoute('/tc/sitemap.xml', sitemapEndpoints.tc);

app.get('/robots.txt', (req, res) => {
  res.type('text/plain');
  if (isProd) {
    // disallow robots to crawl /status for production environment
    res.send('User-agent: *\nDisallow: /status');
  } else {
    // disallow robots to crawl all contents for non-production environment
    res.send('User-agent: *\nDisallow: /');
  }
});

// Use language detection middleware for all other GET requests
app.get('*', cookieParser(), require('./middleware/detect-language.js'), isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res));
});
